{"version":3,"sources":["assets/icons.tsx","components/settings-dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GearIcon","width","height","viewBox","version","id","transform","fill","d","SettingsDashboard","App","useState","settingsOpen","setSettingsOpen","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAEaA,G,MAAW,kBACtB,yBAAKC,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYC,QAAQ,OAC1D,uBACEC,GAAG,yBACHC,UAAU,sCACVC,KAAK,WAEL,uBAAGF,GAAG,QAAQC,UAAU,oCACtB,0BACEE,EAAE,ojFACFH,GAAG,0BCVAI,EAAoB,kBAAM,+BCgCxBC,EA7BH,WAAO,IAAD,EACwBC,oBAAS,GADjC,mBACTC,EADS,KACKC,EADL,KAGhB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,aAAd,OACA,qCAGHF,GACC,yBAAKE,UAAU,6CACb,yBAAKA,UAAU,wBACb,0CAEF,kBAAC,EAAD,OAGJ,4BACEA,UAAU,8BACVC,QAAS,kBAAMF,GAAiBD,KAEhC,kBAAC,EAAD,SChBYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3347243.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const GearIcon = () => (\n  <svg width=\"21px\" height=\"20px\" viewBox=\"0 0 21 20\" version=\"1.1\">\n    <g\n      id=\"Dribbble-Light-Preview\"\n      transform=\"translate(-419.000000, -320.000000)\"\n      fill=\"#000000\"\n    >\n      <g id=\"icons\" transform=\"translate(56.000000, 160.000000)\">\n        <path\n          d=\"M374.55,170 C374.55,170.552 374.0796,171 373.5,171 C372.9204,171 372.45,170.552 372.45,170 C372.45,169.448 372.9204,169 373.5,169 C374.0796,169 374.55,169.448 374.55,170 M378.561,171.358 C378.09585,173.027 376.67835,174.377 374.9259,174.82 C370.9359,175.828 367.3806,172.442 368.439,168.642 C368.90415,166.973 370.32165,165.623 372.0741,165.18 C376.0641,164.172 379.6194,167.558 378.561,171.358 M382.95,169 L381.2112,169 C380.95815,169 380.6106,168.984 380.6127,168.743 C380.61795,167.854 380.3124,166.59 379.6383,165.898 C379.4661,165.721 379.5165,165.559 379.695,165.389 L380.92455,164.281 C381.3351,163.89 381.3351,163.288 380.92455,162.898 C380.51505,162.507 379.84935,162.523 379.43985,162.913 L378.2103,164.092 C378.0318,164.262 377.75565,164.283 377.5446,164.151 C376.7781,163.669 375.91185,163.322 374.9805,163.141 C374.7327,163.092 374.55,162.897 374.55,162.656 L374.55,161 C374.55,160.448 374.0796,160 373.5,160 C372.9204,160 372.45,160.448 372.45,161 L372.45,162.656 C372.45,162.897 372.2673,163.094 372.0195,163.143 C371.08815,163.324 370.2219,163.672 369.4554,164.154 C369.24435,164.287 368.9682,164.27 368.7897,164.1 L367.56015,162.929 C367.15065,162.538 366.48495,162.538 366.07545,162.929 C365.6649,163.319 365.6649,163.953 366.07545,164.343 L367.305,165.514 C367.4835,165.684 367.5108,165.953 367.3617,166.148 C366.843,166.831 366.5112,167.562 366.3621,168.84 C366.33375,169.079 366.04185,169 365.7888,169 L364.05,169 C363.4704,169 363,169.448 363,170 C363,170.552 363.4704,171 364.05,171 L365.7888,171 C366.04185,171 366.34845,171.088 366.39885,171.323 C366.5889,172.21 366.85665,172.872 367.3617,173.602 C367.50135,173.803 367.4835,174.191 367.305,174.361 L366.07545,175.594 C365.6649,175.985 365.6649,176.649 366.07545,177.04 C366.48495,177.43 367.15065,177.446 367.56015,177.055 L368.7897,175.892 C368.9682,175.722 369.24435,175.709 369.4554,175.842 C370.2219,176.323 371.08815,176.674 372.0195,176.855 C372.2673,176.904 372.45,177.103 372.45,177.344 L372.45,179 C372.45,179.552 372.9204,180 373.5,180 C374.0796,180 374.55,179.552 374.55,179 L374.55,177.344 C374.55,177.103 374.7327,176.906 374.9805,176.857 C375.91185,176.676 376.7781,176.327 377.5446,175.846 C377.75565,175.713 378.0318,175.73 378.2103,175.9 L379.43985,177.071 C379.84935,177.462 380.51505,177.462 380.92455,177.071 C381.3351,176.681 381.3351,176.047 380.92455,175.657 L379.695,174.486 C379.5165,174.316 379.49865,174.053 379.6383,173.852 C380.14335,173.122 380.4174,172.714 380.69985,171.91 C380.7807,171.682 380.95815,171 381.2112,171 L382.95,171 C383.5296,171 384,170.552 384,170 C384,169.448 383.5296,169 382.95,169\"\n          id=\"settings-[#1491]\"\n        ></path>\n      </g>\n    </g>\n  </svg>\n);\n","import React from \"react\";\n\nexport const SettingsDashboard = () => <div></div>;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { GearIcon } from \"./assets/icons\";\nimport { SettingsDashboard } from \"./components/settings-dashboard\";\n\nconst App = () => {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  return (\n    <div className=\"flex\">\n      <div className=\"w-full\">\n        <div className=\"flex justify-between\">\n          <h1 className=\"font-bold\">App</h1>\n          <p>Test</p>\n        </div>\n      </div>\n      {settingsOpen && (\n        <div className=\"bg-gray-400 top-0 right-0 w-5/12 h-screen\">\n          <div className=\"flex justify-between\">\n            <div>SETTINGS</div>\n          </div>\n          <SettingsDashboard />\n        </div>\n      )}\n      <button\n        className=\"absolute right-0 top-0 z-40\"\n        onClick={() => setSettingsOpen(!settingsOpen)}\n      >\n        <GearIcon />\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}